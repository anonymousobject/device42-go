
/*
 * Device42 API
 *
 * <b><h2>API Overview</h2></b><br>Restful API are supported in Device42 as one of the primary methods of entering, editing and retrieving data.<br><br> The API documentation has samples in curl for now and we will be adding other programming languages in future. You can refer to our github repositories at https://github.com/device42 for some sample code in python.<br><br> The RESTful API's enforce the role-based security that is created with the Device42 app. If you want a user to have access via the API, but not via the UI - deselect 'Staff Status' for that user from UI Tools > Admins & Permissions > Administrators.<br><br>If you'd like to see your changes on our UI, please visit http://swaggerdemo.device42.com and use credentials 'guest:device42_rocks!'. Please be aware that every 30 minutes our database resets and all data entered with POST/PUT calls from this page will be lost.<br><br>If you have any questions/suggestions, please send us a note to support at device42.com below. <br><h2><a id = 'Sample_API_Code'><b>Sample API Code</b></a></h2> <b>Sample Code with API Calls in the Python and .Net Programming Languages.</b><br>The following programs written in the Python programming language are available at <a href= 'https://github.com/device42/Device42-AutoDiscovery-Scripts'>Device42 sample programs</a><br><ul><li>api-sample.py: Runs against a single Windows system and uploads info to device42 appliance.</li><li>ad-sample.py: Can run against Active directory computers, servers or a given list and upload discovered systems’ info to device42 appliance.</li><li>d42_api_linux_upload_sample_script.py: Runs on a single *nix based system and uploads info to device42 appliance.</li><li>sample-script-facter-facts-to-d42: Runs on puppet master and uploads nodes info from facter fact files to device42 appliance.</li><li>d42_api_solaris_sample_script.py: Runs on an individual solaris system and uploads info to device42 appliance.</li></ul>The csv2d42apis.py sample program shows how to create a CSV file of data to import into device42. It reads a CSV file, matches columns to arguments for APIs and sends data to device42 via POST or PUT. This program can be found at: <a href= 'https://github.com/device42/API_Helpers'> Device42 sample CSV importer</a>.<br><br>The Auto Discovery Client source code can be found at Device42 <a href='https://docs.device42.com/auto-discovery/'>Auto Discovery Client</a>. This is a .net program that uses the device42 Restful API’s to load the discovered data.<h2><a id = 'Response_Status_Messages'><b>Response & Status Messages</b></a></h2><b>Responses</b><br>The response to most POST calls will have the following format: <br>{'msg':['PartModel added/updated', 17, 'RAM Acme 123456', true, true], 'code':0}<br><br>Using the example above:<br>'17' = ID of the object<br>'RAM Acme 123456' = representation of the object<br> 'true, true' = object added and is new.<br>'true, false' = object updated.<br>'false, false' = no changes.<br><br><b>Status Codes</b><br><u>Code 0</u><br>Success! e.g. = {'msg': 'device added or updated', <b>code:0</b>}<br><br><u>'HTTP/1.1 200 OK'</u><br>Success! All other responses are errors and will display an error code e.g.: 400, 401, 403, 405, 410, 500, 503. These are explained in each call.<br><br>Please let us know if you notice something odd with a response and we will fix it! :) <h2><a id = 'Get_Limits_Offsets'><b>API Get Limits and Offsets</b></a></h2>In Device42’s global settings we have the option to enforce API GET limits and this setting is recommended for better performance. To set this value from Device42, go to Tools>Settings>Global Settings and the click Edit in the top right. Toward the bottom of the screen you will see the API section. First check the “Enforce API GET Limits” checkbox, then enter a value for API GET Limit. A good limit to start with is 500 or 1000, depending on the performance you experience.<br><br>After setting this limit all GET calls below can have the results augmented via “offset” and “limit” parameters to tell Device42 which value to start returning results from, and how many results to return at maximum.<br>Examples:<br><br>'/?limit=50' returns the first 50 results.<br><br> '/?offset=100' will start at the 101st result. <br><br>'/?offset=42&limit=42' returns 42 results, starting at the 43rd.<br><br> Note that offset is used for paging - that is, the offset is only applied when the total number of objects returned exceeds the limit that is returned.
 *
 * API version: 2.0
 * Contact: support@device42.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type AssetsApiService service

/* 
AssetsApiService This API is used to delete the asset with the asset id supplied as the required argument.
Delete Asset
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetId asset id

@return interface{}
*/
func (a *AssetsApiService) DeleteAssets(ctx context.Context, assetId int32) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1.0/assets/{asset-id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"asset-id"+"}", fmt.Sprintf("%v", assetId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
AssetsApiService Retrieve basic information about all assets.
Get All Assets
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AssetsApiGetAssetsOpts - Optional Parameters:
     * @param "AssetNo" (optional.String) -  filter by asset # (Added in v6.0.0)
     * @param "SerialNo" (optional.String) -  filter by serial # (Added in v6.0.0)
     * @param "LastUpdatedLt" (optional.String) -  last updated less than date YYYY-MM-DD format
     * @param "LastUpdatedGt" (optional.String) -  last updated greater than date YYYY-MM-DD format
     * @param "FirstAddedLt" (optional.String) -  first added less than date YYYY-MM-DD format
     * @param "FirstAddedGt" (optional.String) -  first added greater date YYYY-MM-DD format
     * @param "Type_" (optional.String) -  filter by asset type
     * @param "AssetId" (optional.String) -  comma separated values of existing assets.
     * @param "ServiceLevel" (optional.String) -  filter by service level name
     * @param "Customer" (optional.String) -  filter by customer name
     * @param "Tags" (optional.String) -  filter by tags. comma separated for multiple tags (This is an OR filter, gets all the devices for all comma separated tags)
     * @param "TagsAnd" (optional.String) -  filter by all the tags, separated by comma. (This is an AND filter and all tags have to match for filter, this was added in v6.3.1)
     * @param "AssetNoContains" (optional.String) -  search for any asset that contains matching asset # (Added in v9.2.0)
     * @param "CustomFieldsAnd" (optional.String) -  filter by custom fields, and filter, format of key1:value1,key2:value2
     * @param "CustomFieldsOr" (optional.String) -  filter by custom fields, or filter, format of key1:value1,key2:value2
     * @param "RelatedDeviceId" (optional.String) -  ID of the related device (added in v9.3.0)

@return interface{}
*/

type AssetsApiGetAssetsOpts struct { 
	AssetNo optional.String
	SerialNo optional.String
	LastUpdatedLt optional.String
	LastUpdatedGt optional.String
	FirstAddedLt optional.String
	FirstAddedGt optional.String
	Type_ optional.String
	AssetId optional.String
	ServiceLevel optional.String
	Customer optional.String
	Tags optional.String
	TagsAnd optional.String
	AssetNoContains optional.String
	CustomFieldsAnd optional.String
	CustomFieldsOr optional.String
	RelatedDeviceId optional.String
}

func (a *AssetsApiService) GetAssets(ctx context.Context, localVarOptionals *AssetsApiGetAssetsOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1.0/assets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.AssetNo.IsSet() {
		localVarQueryParams.Add("asset_no", parameterToString(localVarOptionals.AssetNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SerialNo.IsSet() {
		localVarQueryParams.Add("serial_no", parameterToString(localVarOptionals.SerialNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastUpdatedLt.IsSet() {
		localVarQueryParams.Add("last_updated_lt", parameterToString(localVarOptionals.LastUpdatedLt.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastUpdatedGt.IsSet() {
		localVarQueryParams.Add("last_updated_gt", parameterToString(localVarOptionals.LastUpdatedGt.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FirstAddedLt.IsSet() {
		localVarQueryParams.Add("first_added_lt", parameterToString(localVarOptionals.FirstAddedLt.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FirstAddedGt.IsSet() {
		localVarQueryParams.Add("first_added_gt", parameterToString(localVarOptionals.FirstAddedGt.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AssetId.IsSet() {
		localVarQueryParams.Add("asset_id", parameterToString(localVarOptionals.AssetId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ServiceLevel.IsSet() {
		localVarQueryParams.Add("service_level", parameterToString(localVarOptionals.ServiceLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Customer.IsSet() {
		localVarQueryParams.Add("customer", parameterToString(localVarOptionals.Customer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Tags.IsSet() {
		localVarQueryParams.Add("tags", parameterToString(localVarOptionals.Tags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TagsAnd.IsSet() {
		localVarQueryParams.Add("tags_and", parameterToString(localVarOptionals.TagsAnd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AssetNoContains.IsSet() {
		localVarQueryParams.Add("asset_no_contains", parameterToString(localVarOptionals.AssetNoContains.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CustomFieldsAnd.IsSet() {
		localVarQueryParams.Add("custom_fields_and", parameterToString(localVarOptionals.CustomFieldsAnd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CustomFieldsOr.IsSet() {
		localVarQueryParams.Add("custom_fields_or", parameterToString(localVarOptionals.CustomFieldsOr.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RelatedDeviceId.IsSet() {
		localVarQueryParams.Add("related_device_id", parameterToString(localVarOptionals.RelatedDeviceId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
AssetsApiService Retrieve detailed information about a specific asset.
Get a Specific Asset
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetId The ID of the asset to retrieve
 * @param optional nil or *AssetsApiGetAssetsAssetIdOpts - Optional Parameters:
     * @param "IncludeCols" (optional.String) -  do not return all columns just the ones specified. For example, ?include_cols&#x3D;name, device_id, rack will only result in name, device_id, and rack included in the output. The following column names can be part of include_cols: name, device_id, rack, name, device_id, serial_no, asset_no, uuid, notes, in_service, service_level, type, id, last_updated, tags, customer_id, customer, hw_model, hw_size, manufacturer, hw_depth, rack, start_at, rack_id, orientation, row, room, building, blade_host_name, blade_host_id, slot_number, virtual_host_name, location, device_sub_type, os, osarch, osver, osverno, custom_fields, device_purchase_line_items, device_external_links, ip_addresses, mac_addresses, cpucount, cpucore, cpuspeed, ram, hddcount, hddsize, hddraid, hddraid_type, hdd_details, pdu_mapping_url,modules, vms, devices, aliases, xpos, ucs_manager

@return Assets
*/

type AssetsApiGetAssetsAssetIdOpts struct { 
	IncludeCols optional.String
}

func (a *AssetsApiService) GetAssetsAssetId(ctx context.Context, assetId int32, localVarOptionals *AssetsApiGetAssetsAssetIdOpts) (Assets, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue Assets
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1.0/assets/{asset-id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"asset-id"+"}", fmt.Sprintf("%v", assetId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IncludeCols.IsSet() {
		localVarQueryParams.Add("include_cols", parameterToString(localVarOptionals.IncludeCols.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v Assets
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
AssetsApiService Create assets.
Create Assets
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param type_ Select an existing asset type - required.&lt;br&gt; You can add a new asset type in the UI or with PUT.
 * @param optional nil or *AssetsApiPostAssetsOpts - Optional Parameters:
     * @param "Name" (optional.String) -  name of asset
     * @param "ServiceLevel" (optional.String) -  In Service, Spare, Not in Service are pre-defined - or choose your own.
     * @param "SerialNo" (optional.String) - 
     * @param "AssetNo" (optional.String) - 
     * @param "Customer" (optional.String) -  Name of existing customer.
     * @param "Location" (optional.String) -  Location/region of instance deployment
     * @param "Notes" (optional.String) -  Any additional notes
     * @param "Building" (optional.String) - 
     * @param "Vendor" (optional.String) -  Name of existing vendor
     * @param "ImgfileId" (optional.String) -  image file id. You can see these from Tools &gt; Import &gt; Hardware Import for now.
     * @param "Imgfile" (optional.String) -  name of the image file (Added in v5.8.2). Use instead of imgfile_id
     * @param "BackImageId" (optional.String) -  back image file id. You can see these from Tools &gt; Import &gt; Hardware Import for now.
     * @param "BackImage" (optional.String) -  name of the back image file. Use instead of back_image_id.
     * @param "RackId" (optional.String) -  ID of existing rack to add asset to.
     * @param "Room" (optional.String) -  Used to identify a unique rack or to place asset in existing room.
     * @param "StartAt" (optional.String) -  Required if adding to rack. U Start location.
     * @param "Size" (optional.Int32) -  Required if adding asset to rack. in U.
     * @param "Orientation" (optional.String) -  Back if back facing. Otherwise ignored
     * @param "Where" (optional.String) -  Location in a rack. Note: If mounted a size must be provided or available from the hardware model.
     * @param "XPos" (optional.Int32) -  A number between 0 and 2520 representing the position within the u slot in increments of 252, which is equal to 1/10th of the width of the rack. 0 will place a device flush left, 1260 will place the left side of a device in center.
     * @param "Depth" (optional.String) -  Half depth by default. full to override. Optional.
     * @param "DeviceId" (optional.Int32) -  ID of the related device
     * @param "Tags" (optional.String) -  add tags (comma separated)
     * @param "TagsRemove" (optional.String) -  remove tags (comma separated)
     * @param "Category" (optional.String) -  If multitenancy is on, admin groups that have access to this object are specified here, e.g. Prod_East:no, Corp:yes specifies that the admin groups for this object are Prod_East with view only permission and Corp with change permission. Use for initial insert.
     * @param "PatchPanelModelId" (optional.String) -  Patch Panel Model ID or UI Tools &gt; Export &gt; Patch Panel Model
     * @param "PatchPanelModel" (optional.String) -  Name of the patch panel model (use instead of ID, Added in v5.8.2)
     * @param "NumberingStartFrom" (optional.String) -  This is starting # for patch panel ports. Defaults to 1 if not entered.
     * @param "PatchPanelModuleModelId" (optional.String) - 
     * @param "PatchPanelModuleModel" (optional.String) -  Name of the patch panel module model (use instead of ID, Added in v5.8.2)
     * @param "ModuleHostId" (optional.String) - 
     * @param "ModuleHost" (optional.String) -  Name of the Module host. Must be unique asset name for this to work. (use instead of ID, Added in v5.8.2)
     * @param "SlotNo" (optional.String) - 

@return interface{}
*/

type AssetsApiPostAssetsOpts struct { 
	Name optional.String
	ServiceLevel optional.String
	SerialNo optional.String
	AssetNo optional.String
	Customer optional.String
	Location optional.String
	Notes optional.String
	Building optional.String
	Vendor optional.String
	ImgfileId optional.String
	Imgfile optional.String
	BackImageId optional.String
	BackImage optional.String
	RackId optional.String
	Room optional.String
	StartAt optional.String
	Size optional.Int32
	Orientation optional.String
	Where optional.String
	XPos optional.Int32
	Depth optional.String
	DeviceId optional.Int32
	Tags optional.String
	TagsRemove optional.String
	Category optional.String
	PatchPanelModelId optional.String
	PatchPanelModel optional.String
	NumberingStartFrom optional.String
	PatchPanelModuleModelId optional.String
	PatchPanelModuleModel optional.String
	ModuleHostId optional.String
	ModuleHost optional.String
	SlotNo optional.String
}

func (a *AssetsApiService) PostAssets(ctx context.Context, type_ string, localVarOptionals *AssetsApiPostAssetsOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1.0/assets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("type", parameterToString(type_, ""))
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarFormParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ServiceLevel.IsSet() {
		localVarFormParams.Add("service_level", parameterToString(localVarOptionals.ServiceLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SerialNo.IsSet() {
		localVarFormParams.Add("serial_no", parameterToString(localVarOptionals.SerialNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AssetNo.IsSet() {
		localVarFormParams.Add("asset_no", parameterToString(localVarOptionals.AssetNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Customer.IsSet() {
		localVarFormParams.Add("customer", parameterToString(localVarOptionals.Customer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Location.IsSet() {
		localVarFormParams.Add("location", parameterToString(localVarOptionals.Location.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Notes.IsSet() {
		localVarFormParams.Add("notes", parameterToString(localVarOptionals.Notes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Building.IsSet() {
		localVarFormParams.Add("building", parameterToString(localVarOptionals.Building.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Vendor.IsSet() {
		localVarFormParams.Add("vendor", parameterToString(localVarOptionals.Vendor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ImgfileId.IsSet() {
		localVarFormParams.Add("imgfile_id", parameterToString(localVarOptionals.ImgfileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Imgfile.IsSet() {
		localVarFormParams.Add("imgfile", parameterToString(localVarOptionals.Imgfile.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BackImageId.IsSet() {
		localVarFormParams.Add("back_image_id", parameterToString(localVarOptionals.BackImageId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BackImage.IsSet() {
		localVarFormParams.Add("back_image", parameterToString(localVarOptionals.BackImage.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RackId.IsSet() {
		localVarFormParams.Add("rack_id", parameterToString(localVarOptionals.RackId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Room.IsSet() {
		localVarFormParams.Add("room", parameterToString(localVarOptionals.Room.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartAt.IsSet() {
		localVarFormParams.Add("start_at", parameterToString(localVarOptionals.StartAt.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarFormParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Orientation.IsSet() {
		localVarFormParams.Add("orientation", parameterToString(localVarOptionals.Orientation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Where.IsSet() {
		localVarFormParams.Add("where", parameterToString(localVarOptionals.Where.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.XPos.IsSet() {
		localVarFormParams.Add("x_pos", parameterToString(localVarOptionals.XPos.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Depth.IsSet() {
		localVarFormParams.Add("depth", parameterToString(localVarOptionals.Depth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DeviceId.IsSet() {
		localVarFormParams.Add("device_id", parameterToString(localVarOptionals.DeviceId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Tags.IsSet() {
		localVarFormParams.Add("tags", parameterToString(localVarOptionals.Tags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TagsRemove.IsSet() {
		localVarFormParams.Add("tags_remove", parameterToString(localVarOptionals.TagsRemove.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Category.IsSet() {
		localVarFormParams.Add("category", parameterToString(localVarOptionals.Category.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PatchPanelModelId.IsSet() {
		localVarFormParams.Add("patch_panel_model_id", parameterToString(localVarOptionals.PatchPanelModelId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PatchPanelModel.IsSet() {
		localVarFormParams.Add("patch_panel_model", parameterToString(localVarOptionals.PatchPanelModel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NumberingStartFrom.IsSet() {
		localVarFormParams.Add("numbering_start_from", parameterToString(localVarOptionals.NumberingStartFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PatchPanelModuleModelId.IsSet() {
		localVarFormParams.Add("patch_panel_module_model_id", parameterToString(localVarOptionals.PatchPanelModuleModelId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PatchPanelModuleModel.IsSet() {
		localVarFormParams.Add("patch_panel_module_model", parameterToString(localVarOptionals.PatchPanelModuleModel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModuleHostId.IsSet() {
		localVarFormParams.Add("module_host_id", parameterToString(localVarOptionals.ModuleHostId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModuleHost.IsSet() {
		localVarFormParams.Add("module_host", parameterToString(localVarOptionals.ModuleHost.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SlotNo.IsSet() {
		localVarFormParams.Add("slot_no", parameterToString(localVarOptionals.SlotNo.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
AssetsApiService Modify assets.
Modify Assets. Need either &lt;b&gt;Asset ID&lt;/b&gt; or &lt;b&gt;Asset&lt;/b&gt;
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AssetsApiPutAssetsOpts - Optional Parameters:
     * @param "AssetId" (optional.Int32) -  Asset ID
     * @param "Asset" (optional.String) -  Name of asset. Required if asset_id not provided.
     * @param "Type_" (optional.String) -  Used to change/add the type of asset
     * @param "ServiceLevel" (optional.String) -  In Service, Spare, Not in Service are pre-defined - or choose your own.
     * @param "SerialNo" (optional.String) - 
     * @param "AssetNo" (optional.String) - 
     * @param "Customer" (optional.String) -  Name of existing customer.
     * @param "Location" (optional.String) -  Location/region of instance deployment
     * @param "Notes" (optional.String) -  Any additional notes
     * @param "Building" (optional.String) - 
     * @param "Vendor" (optional.String) -  Name of existing vendor
     * @param "ImgfileId" (optional.String) -  image file id. You can see these from Tools &gt; Import &gt; Hardware Import for now.
     * @param "Imgfile" (optional.String) -  name of the image file (Added in v5.8.2). Use instead of imgfile_id
     * @param "BackImageId" (optional.String) -  back image file id. You can see these from Tools &gt; Import &gt; Hardware Import for now.
     * @param "BackImage" (optional.String) -  name of the back image file. Use instead of back_image_id.
     * @param "RackId" (optional.String) -  ID of existing rack to add asset to.
     * @param "Room" (optional.String) -  Used to identify a unique rack or to place asset in existing room.
     * @param "StartAt" (optional.String) -  Required if adding to rack. U Start location.
     * @param "Size" (optional.Int32) -  Required if adding asset to rack. in U.
     * @param "Orientation" (optional.String) -  Back if back facing. Otherwise ignored
     * @param "Where" (optional.String) -  Location in a rack. Note: If mounted a size must be provided or available from the hardware model.
     * @param "XPos" (optional.Int32) -  A number between 0 and 2520 representing the position within the u slot in increments of 252, which is equal to 1/10th of the width of the rack. 0 will place a device flush left, 1260 will place the left side of a device in center.
     * @param "Depth" (optional.String) -  Half depth by default. full to override. Optional.
     * @param "DeviceId" (optional.Int32) -  ID of the related device
     * @param "Tags" (optional.String) -  add tags (comma separated)
     * @param "TagsRemove" (optional.String) -  remove tags (comma separated)
     * @param "Category" (optional.String) -  name of the category
     * @param "PatchPanelModelId" (optional.String) -  Patch Panel Model ID or UI Tools &gt; Export &gt; Patch Panel Model
     * @param "PatchPanelModel" (optional.String) -  Name of the patch panel model (use instead of ID, Added in v5.8.2)
     * @param "NumberingStartFrom" (optional.String) -  This is starting # for patch panel ports. Defaults to 1 if not entered.
     * @param "PatchPanelModuleModelId" (optional.String) - 
     * @param "PatchPanelModuleModel" (optional.String) -  Name of the patch panel module model (use instead of ID, Added in v5.8.2)
     * @param "ModuleHostId" (optional.String) - 
     * @param "ModuleHost" (optional.String) -  Name of the Module host. Must be unique asset name for this to work. (use instead of ID, Added in v5.8.2)
     * @param "SlotNo" (optional.String) - 

@return interface{}
*/

type AssetsApiPutAssetsOpts struct { 
	AssetId optional.Int32
	Asset optional.String
	Type_ optional.String
	ServiceLevel optional.String
	SerialNo optional.String
	AssetNo optional.String
	Customer optional.String
	Location optional.String
	Notes optional.String
	Building optional.String
	Vendor optional.String
	ImgfileId optional.String
	Imgfile optional.String
	BackImageId optional.String
	BackImage optional.String
	RackId optional.String
	Room optional.String
	StartAt optional.String
	Size optional.Int32
	Orientation optional.String
	Where optional.String
	XPos optional.Int32
	Depth optional.String
	DeviceId optional.Int32
	Tags optional.String
	TagsRemove optional.String
	Category optional.String
	PatchPanelModelId optional.String
	PatchPanelModel optional.String
	NumberingStartFrom optional.String
	PatchPanelModuleModelId optional.String
	PatchPanelModuleModel optional.String
	ModuleHostId optional.String
	ModuleHost optional.String
	SlotNo optional.String
}

func (a *AssetsApiService) PutAssets(ctx context.Context, localVarOptionals *AssetsApiPutAssetsOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1.0/assets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Category.IsSet() {
		localVarQueryParams.Add("category", parameterToString(localVarOptionals.Category.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.AssetId.IsSet() {
		localVarFormParams.Add("asset_id", parameterToString(localVarOptionals.AssetId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Asset.IsSet() {
		localVarFormParams.Add("asset", parameterToString(localVarOptionals.Asset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarFormParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ServiceLevel.IsSet() {
		localVarFormParams.Add("service_level", parameterToString(localVarOptionals.ServiceLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SerialNo.IsSet() {
		localVarFormParams.Add("serial_no", parameterToString(localVarOptionals.SerialNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AssetNo.IsSet() {
		localVarFormParams.Add("asset_no", parameterToString(localVarOptionals.AssetNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Customer.IsSet() {
		localVarFormParams.Add("customer", parameterToString(localVarOptionals.Customer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Location.IsSet() {
		localVarFormParams.Add("location", parameterToString(localVarOptionals.Location.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Notes.IsSet() {
		localVarFormParams.Add("notes", parameterToString(localVarOptionals.Notes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Building.IsSet() {
		localVarFormParams.Add("building", parameterToString(localVarOptionals.Building.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Vendor.IsSet() {
		localVarFormParams.Add("vendor", parameterToString(localVarOptionals.Vendor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ImgfileId.IsSet() {
		localVarFormParams.Add("imgfile_id", parameterToString(localVarOptionals.ImgfileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Imgfile.IsSet() {
		localVarFormParams.Add("imgfile", parameterToString(localVarOptionals.Imgfile.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BackImageId.IsSet() {
		localVarFormParams.Add("back_image_id", parameterToString(localVarOptionals.BackImageId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BackImage.IsSet() {
		localVarFormParams.Add("back_image", parameterToString(localVarOptionals.BackImage.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RackId.IsSet() {
		localVarFormParams.Add("rack_id", parameterToString(localVarOptionals.RackId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Room.IsSet() {
		localVarFormParams.Add("room", parameterToString(localVarOptionals.Room.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartAt.IsSet() {
		localVarFormParams.Add("start_at", parameterToString(localVarOptionals.StartAt.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarFormParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Orientation.IsSet() {
		localVarFormParams.Add("orientation", parameterToString(localVarOptionals.Orientation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Where.IsSet() {
		localVarFormParams.Add("where", parameterToString(localVarOptionals.Where.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.XPos.IsSet() {
		localVarFormParams.Add("x_pos", parameterToString(localVarOptionals.XPos.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Depth.IsSet() {
		localVarFormParams.Add("depth", parameterToString(localVarOptionals.Depth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DeviceId.IsSet() {
		localVarFormParams.Add("device_id", parameterToString(localVarOptionals.DeviceId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Tags.IsSet() {
		localVarFormParams.Add("tags", parameterToString(localVarOptionals.Tags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TagsRemove.IsSet() {
		localVarFormParams.Add("tags_remove", parameterToString(localVarOptionals.TagsRemove.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PatchPanelModelId.IsSet() {
		localVarFormParams.Add("patch_panel_model_id", parameterToString(localVarOptionals.PatchPanelModelId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PatchPanelModel.IsSet() {
		localVarFormParams.Add("patch_panel_model", parameterToString(localVarOptionals.PatchPanelModel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NumberingStartFrom.IsSet() {
		localVarFormParams.Add("numbering_start_from", parameterToString(localVarOptionals.NumberingStartFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PatchPanelModuleModelId.IsSet() {
		localVarFormParams.Add("patch_panel_module_model_id", parameterToString(localVarOptionals.PatchPanelModuleModelId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PatchPanelModuleModel.IsSet() {
		localVarFormParams.Add("patch_panel_module_model", parameterToString(localVarOptionals.PatchPanelModuleModel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModuleHostId.IsSet() {
		localVarFormParams.Add("module_host_id", parameterToString(localVarOptionals.ModuleHostId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModuleHost.IsSet() {
		localVarFormParams.Add("module_host", parameterToString(localVarOptionals.ModuleHost.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SlotNo.IsSet() {
		localVarFormParams.Add("slot_no", parameterToString(localVarOptionals.SlotNo.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
AssetsApiService Create/update custom fields for assets.
Create or update custom fields for assets. \&quot;ID\&quot; or \&quot;name\&quot; of asset is needed even when value is not being changed
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param key Can be new or existing. This is the custom field name.
 * @param optional nil or *AssetsApiPutCustomFieldsAssetOpts - Optional Parameters:
     * @param "Name" (optional.String) -  Name of asset
     * @param "Id" (optional.String) -  ID of asset
     * @param "Type_" (optional.String) -  this is the custom field type. If left blank, default is text. Date should be formatted as YYYY-MM-DD
     * @param "RelatedFieldName" (optional.String) -  Required if type &#x3D; related field.
     * @param "AddToPicklist" (optional.String) -  Comma separated values to add to picklist. If type is picklist and custom field is new, this is a required field. Duplicates will be ignored.
     * @param "Value" (optional.String) -  This will set the value of the custom field for the specific object.
     * @param "ClearValue" (optional.String) -  yes to clear existing value for that field
     * @param "Notes" (optional.String) -  Any additional notes
     * @param "ClearNotes" (optional.String) -  Yes to clear any existing notes.
     * @param "BulkFields" (optional.String) -  comma separated key value pairs, with key and value separated by colon. e.g.key1:value1, key2:value2

@return interface{}
*/

type AssetsApiPutCustomFieldsAssetOpts struct { 
	Name optional.String
	Id optional.String
	Type_ optional.String
	RelatedFieldName optional.String
	AddToPicklist optional.String
	Value optional.String
	ClearValue optional.String
	Notes optional.String
	ClearNotes optional.String
	BulkFields optional.String
}

func (a *AssetsApiService) PutCustomFieldsAsset(ctx context.Context, key string, localVarOptionals *AssetsApiPutCustomFieldsAssetOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1.0/custom_fields/asset/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarFormParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarFormParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	localVarFormParams.Add("key", parameterToString(key, ""))
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarFormParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RelatedFieldName.IsSet() {
		localVarFormParams.Add("related_field_name", parameterToString(localVarOptionals.RelatedFieldName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AddToPicklist.IsSet() {
		localVarFormParams.Add("add_to_picklist", parameterToString(localVarOptionals.AddToPicklist.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Value.IsSet() {
		localVarFormParams.Add("value", parameterToString(localVarOptionals.Value.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClearValue.IsSet() {
		localVarFormParams.Add("clear_value", parameterToString(localVarOptionals.ClearValue.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Notes.IsSet() {
		localVarFormParams.Add("notes", parameterToString(localVarOptionals.Notes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClearNotes.IsSet() {
		localVarFormParams.Add("clear_notes", parameterToString(localVarOptionals.ClearNotes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BulkFields.IsSet() {
		localVarFormParams.Add("bulk_fields", parameterToString(localVarOptionals.BulkFields.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
