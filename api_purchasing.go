
/*
 * Device42 API
 *
 * <b><h2>API Overview</h2></b><br>Restful API are supported in Device42 as one of the primary methods of entering, editing and retrieving data.<br><br> The API documentation has samples in curl for now and we will be adding other programming languages in future. You can refer to our github repositories at https://github.com/device42 for some sample code in python.<br><br> The RESTful API's enforce the role-based security that is created with the Device42 app. If you want a user to have access via the API, but not via the UI - deselect 'Staff Status' for that user from UI Tools > Admins & Permissions > Administrators.<br><br>If you'd like to see your changes on our UI, please visit http://swaggerdemo.device42.com and use credentials 'guest:device42_rocks!'. Please be aware that every 30 minutes our database resets and all data entered with POST/PUT calls from this page will be lost.<br><br>If you have any questions/suggestions, please send us a note to support at device42.com below. <br><h2><a id = 'Sample_API_Code'><b>Sample API Code</b></a></h2> <b>Sample Code with API Calls in the Python and .Net Programming Languages.</b><br>The following programs written in the Python programming language are available at <a href= 'https://github.com/device42/Device42-AutoDiscovery-Scripts'>Device42 sample programs</a><br><ul><li>api-sample.py: Runs against a single Windows system and uploads info to device42 appliance.</li><li>ad-sample.py: Can run against Active directory computers, servers or a given list and upload discovered systems’ info to device42 appliance.</li><li>d42_api_linux_upload_sample_script.py: Runs on a single *nix based system and uploads info to device42 appliance.</li><li>sample-script-facter-facts-to-d42: Runs on puppet master and uploads nodes info from facter fact files to device42 appliance.</li><li>d42_api_solaris_sample_script.py: Runs on an individual solaris system and uploads info to device42 appliance.</li></ul>The csv2d42apis.py sample program shows how to create a CSV file of data to import into device42. It reads a CSV file, matches columns to arguments for APIs and sends data to device42 via POST or PUT. This program can be found at: <a href= 'https://github.com/device42/API_Helpers'> Device42 sample CSV importer</a>.<br><br>The Auto Discovery Client source code can be found at Device42 <a href='https://docs.device42.com/auto-discovery/'>Auto Discovery Client</a>. This is a .net program that uses the device42 Restful API’s to load the discovered data.<h2><a id = 'Response_Status_Messages'><b>Response & Status Messages</b></a></h2><b>Responses</b><br>The response to most POST calls will have the following format: <br>{'msg':['PartModel added/updated', 17, 'RAM Acme 123456', true, true], 'code':0}<br><br>Using the example above:<br>'17' = ID of the object<br>'RAM Acme 123456' = representation of the object<br> 'true, true' = object added and is new.<br>'true, false' = object updated.<br>'false, false' = no changes.<br><br><b>Status Codes</b><br><u>Code 0</u><br>Success! e.g. = {'msg': 'device added or updated', <b>code:0</b>}<br><br><u>'HTTP/1.1 200 OK'</u><br>Success! All other responses are errors and will display an error code e.g.: 400, 401, 403, 405, 410, 500, 503. These are explained in each call.<br><br>Please let us know if you notice something odd with a response and we will fix it! :) <h2><a id = 'Get_Limits_Offsets'><b>API Get Limits and Offsets</b></a></h2>In Device42’s global settings we have the option to enforce API GET limits and this setting is recommended for better performance. To set this value from Device42, go to Tools>Settings>Global Settings and the click Edit in the top right. Toward the bottom of the screen you will see the API section. First check the “Enforce API GET Limits” checkbox, then enter a value for API GET Limit. A good limit to start with is 500 or 1000, depending on the performance you experience.<br><br>After setting this limit all GET calls below can have the results augmented via “offset” and “limit” parameters to tell Device42 which value to start returning results from, and how many results to return at maximum.<br>Examples:<br><br>'/?limit=50' returns the first 50 results.<br><br> '/?offset=100' will start at the 101st result. <br><br>'/?offset=42&limit=42' returns 42 results, starting at the 43rd.<br><br> Note that offset is used for paging - that is, the offset is only applied when the total number of objects returned exceeds the limit that is returned.
 *
 * API version: 2.0
 * Contact: support@device42.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type PurchasingApiService service

/* 
PurchasingApiService Delete Purchase
This API is used to delete the purchase order with the purchase order id supplied as the required argument.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id purchase id

@return interface{}
*/
func (a *PurchasingApiService) DeletePurchases(ctx context.Context, id int32) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1.0/purchases/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
PurchasingApiService GET method retrieves all Purchases.
Get All Purchases
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PurchasingApiGetPurchasesOpts - Optional Parameters:
     * @param "PurchaseId" (optional.String) -  Device42 Purchase ID
     * @param "OrderNo" (optional.String) -  Order number
     * @param "Vendor" (optional.String) -  Vendor name
     * @param "CostCenter" (optional.String) -  Cost Center
     * @param "Building" (optional.String) -  Associated building
     * @param "Completed" (optional.String) -  Line Item is completed

@return Purchases
*/

type PurchasingApiGetPurchasesOpts struct { 
	PurchaseId optional.String
	OrderNo optional.String
	Vendor optional.String
	CostCenter optional.String
	Building optional.String
	Completed optional.String
}

func (a *PurchasingApiService) GetPurchases(ctx context.Context, localVarOptionals *PurchasingApiGetPurchasesOpts) (Purchases, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue Purchases
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1.0/purchases/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.PurchaseId.IsSet() {
		localVarQueryParams.Add("purchase_id", parameterToString(localVarOptionals.PurchaseId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OrderNo.IsSet() {
		localVarQueryParams.Add("order_no", parameterToString(localVarOptionals.OrderNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Vendor.IsSet() {
		localVarQueryParams.Add("vendor", parameterToString(localVarOptionals.Vendor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CostCenter.IsSet() {
		localVarQueryParams.Add("cost_center", parameterToString(localVarOptionals.CostCenter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Building.IsSet() {
		localVarQueryParams.Add("building", parameterToString(localVarOptionals.Building.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Completed.IsSet() {
		localVarQueryParams.Add("completed", parameterToString(localVarOptionals.Completed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v Purchases
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
PurchasingApiService Create / Update Purchases
Create / Update Purchases. Required parameters: &lt;ul&gt;&lt;li&gt;order_no &lt;b&gt;OR&lt;/b&gt; purchase_id&lt;/li&gt;
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PurchasingApiPostPurchasesOpts - Optional Parameters:
     * @param "OrderNo" (optional.String) -  order number / name for the purchase. Can be new or existing.
     * @param "PurchaseId" (optional.String) -  Can be used instead of order_no to update existing purchase
     * @param "LineType" (optional.String) -  required for any new line being added for both device or contract.
     * @param "LineNo" (optional.String) -  required for existing line items, use existing line # to change existing line item.
     * @param "Vendor" (optional.String) -  The cloud vendor
     * @param "Cost" (optional.String) - 
     * @param "PoDate" (optional.String) - 
     * @param "CostCenter" (optional.String) - 
     * @param "Completed" (optional.String) - 
     * @param "Notes" (optional.String) -  Any additional notes
     * @param "LineName" (optional.String) - 
     * @param "LineQuantity" (optional.String) -  can be calculated automatically from # of objects associated
     * @param "LineCost" (optional.String) -  cost for single object / item.
     * @param "LineCostCenter" (optional.String) - 
     * @param "LineCustomer" (optional.String) - 
     * @param "LineItemType" (optional.String) -  Default is device.
     * @param "LineAssetIds" (optional.String) -  Comma separated asset_id. Only applicable if line_item_type is asset.
     * @param "LineStartDate" (optional.String) -  Date in YYYY-MM-DD format
     * @param "LineEndDate" (optional.String) -  Date in YYYY-MM-DD format
     * @param "LineFrequency" (optional.String) - 
     * @param "LineRenewDate" (optional.String) -  Date in YYYY-MM-DD format
     * @param "LineCancelPolicy" (optional.String) - 
     * @param "LineContractType" (optional.String) - 
     * @param "LineServiceType" (optional.String) -  new service type will be created, if it doesn’t exist (added in v9.0.2)
     * @param "LineContractId" (optional.String) -  (added in v9.0.2)
     * @param "LineNotes" (optional.String) - 
     * @param "LineCompleted" (optional.String) - 
     * @param "LineDevices" (optional.String) -  Comma separated device names. Only applicable if line_item_type is device. Will create new devices if device with name specific here does not exist.
     * @param "LineDeviceSerialNos" (optional.String) -  Comma separated serial numbers. Only applicable if line_item_type is device. Will only work on existing serial numbers.
     * @param "LineDeviceAssetNos" (optional.String) -  Comma separated asset numbers. Only applicable if line_item_type is device. Will only work on existing asset numbers.
     * @param "LineCircuits" (optional.String) -  circuit ID name
     * @param "LineCircuitIds" (optional.String) -  D42 ID for the circuit(s)
     * @param "LineBuildingIds" (optional.String) -  D42 ID for the building(s)
     * @param "LineCertificateIds" (optional.String) -  D42 ID for the certificate(s)
     * @param "LineSoftwareIds" (optional.String) -  D42 ID for the software
     * @param "LineRoomIds" (optional.String) -  D42 ID for the room(s)
     * @param "LineRackIds" (optional.String) -  D42 ID for the rack(s)
     * @param "LinePartIds" (optional.String) -  D42 ID for the part(s)
     * @param "LineDeviceOsIds" (optional.String) -  D42 ID for the Device OS
     * @param "Groups" (optional.String) -  If multitenancy is on, admin groups that have access to this object are specified here, e.g. Prod_East:no,Corp:yes specifies that the admin groups for this object are Prod_East with view only permission and Corp with change permission. If this parameter is present with no value, all groups are deleted.

@return interface{}
*/

type PurchasingApiPostPurchasesOpts struct { 
	OrderNo optional.String
	PurchaseId optional.String
	LineType optional.String
	LineNo optional.String
	Vendor optional.String
	Cost optional.String
	PoDate optional.String
	CostCenter optional.String
	Completed optional.String
	Notes optional.String
	LineName optional.String
	LineQuantity optional.String
	LineCost optional.String
	LineCostCenter optional.String
	LineCustomer optional.String
	LineItemType optional.String
	LineAssetIds optional.String
	LineStartDate optional.String
	LineEndDate optional.String
	LineFrequency optional.String
	LineRenewDate optional.String
	LineCancelPolicy optional.String
	LineContractType optional.String
	LineServiceType optional.String
	LineContractId optional.String
	LineNotes optional.String
	LineCompleted optional.String
	LineDevices optional.String
	LineDeviceSerialNos optional.String
	LineDeviceAssetNos optional.String
	LineCircuits optional.String
	LineCircuitIds optional.String
	LineBuildingIds optional.String
	LineCertificateIds optional.String
	LineSoftwareIds optional.String
	LineRoomIds optional.String
	LineRackIds optional.String
	LinePartIds optional.String
	LineDeviceOsIds optional.String
	Groups optional.String
}

func (a *PurchasingApiService) PostPurchases(ctx context.Context, localVarOptionals *PurchasingApiPostPurchasesOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1.0/purchases/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.OrderNo.IsSet() {
		localVarFormParams.Add("order_no", parameterToString(localVarOptionals.OrderNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PurchaseId.IsSet() {
		localVarFormParams.Add("purchase_id", parameterToString(localVarOptionals.PurchaseId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineType.IsSet() {
		localVarFormParams.Add("line_type", parameterToString(localVarOptionals.LineType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineNo.IsSet() {
		localVarFormParams.Add("line_no", parameterToString(localVarOptionals.LineNo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Vendor.IsSet() {
		localVarFormParams.Add("vendor", parameterToString(localVarOptionals.Vendor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cost.IsSet() {
		localVarFormParams.Add("cost", parameterToString(localVarOptionals.Cost.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PoDate.IsSet() {
		localVarFormParams.Add("po_date", parameterToString(localVarOptionals.PoDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CostCenter.IsSet() {
		localVarFormParams.Add("cost_center", parameterToString(localVarOptionals.CostCenter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Completed.IsSet() {
		localVarFormParams.Add("completed", parameterToString(localVarOptionals.Completed.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Notes.IsSet() {
		localVarFormParams.Add("notes", parameterToString(localVarOptionals.Notes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineName.IsSet() {
		localVarFormParams.Add("line_name", parameterToString(localVarOptionals.LineName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineQuantity.IsSet() {
		localVarFormParams.Add("line_quantity", parameterToString(localVarOptionals.LineQuantity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineCost.IsSet() {
		localVarFormParams.Add("line_cost", parameterToString(localVarOptionals.LineCost.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineCostCenter.IsSet() {
		localVarFormParams.Add("line_cost_center", parameterToString(localVarOptionals.LineCostCenter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineCustomer.IsSet() {
		localVarFormParams.Add("line_customer", parameterToString(localVarOptionals.LineCustomer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineItemType.IsSet() {
		localVarFormParams.Add("line_item_type", parameterToString(localVarOptionals.LineItemType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineAssetIds.IsSet() {
		localVarFormParams.Add("line_asset_ids", parameterToString(localVarOptionals.LineAssetIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineStartDate.IsSet() {
		localVarFormParams.Add("line_start_date", parameterToString(localVarOptionals.LineStartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineEndDate.IsSet() {
		localVarFormParams.Add("line_end_date", parameterToString(localVarOptionals.LineEndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineFrequency.IsSet() {
		localVarFormParams.Add("line_frequency", parameterToString(localVarOptionals.LineFrequency.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineRenewDate.IsSet() {
		localVarFormParams.Add("line_renew_date", parameterToString(localVarOptionals.LineRenewDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineCancelPolicy.IsSet() {
		localVarFormParams.Add("line_cancel_policy", parameterToString(localVarOptionals.LineCancelPolicy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineContractType.IsSet() {
		localVarFormParams.Add("line_contract_type", parameterToString(localVarOptionals.LineContractType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineServiceType.IsSet() {
		localVarFormParams.Add("line_service_type", parameterToString(localVarOptionals.LineServiceType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineContractId.IsSet() {
		localVarFormParams.Add("line_contract_id", parameterToString(localVarOptionals.LineContractId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineNotes.IsSet() {
		localVarFormParams.Add("line_notes", parameterToString(localVarOptionals.LineNotes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineCompleted.IsSet() {
		localVarFormParams.Add("line_completed", parameterToString(localVarOptionals.LineCompleted.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineDevices.IsSet() {
		localVarFormParams.Add("line_devices", parameterToString(localVarOptionals.LineDevices.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineDeviceSerialNos.IsSet() {
		localVarFormParams.Add("line_device_serial_nos", parameterToString(localVarOptionals.LineDeviceSerialNos.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineDeviceAssetNos.IsSet() {
		localVarFormParams.Add("line_device_asset_nos", parameterToString(localVarOptionals.LineDeviceAssetNos.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineCircuits.IsSet() {
		localVarFormParams.Add("line_circuits", parameterToString(localVarOptionals.LineCircuits.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineCircuitIds.IsSet() {
		localVarFormParams.Add("line_circuit_ids", parameterToString(localVarOptionals.LineCircuitIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineBuildingIds.IsSet() {
		localVarFormParams.Add("line_building_ids", parameterToString(localVarOptionals.LineBuildingIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineCertificateIds.IsSet() {
		localVarFormParams.Add("line_certificate_ids", parameterToString(localVarOptionals.LineCertificateIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineSoftwareIds.IsSet() {
		localVarFormParams.Add("line_software_ids", parameterToString(localVarOptionals.LineSoftwareIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineRoomIds.IsSet() {
		localVarFormParams.Add("line_room_ids", parameterToString(localVarOptionals.LineRoomIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineRackIds.IsSet() {
		localVarFormParams.Add("line_rack_ids", parameterToString(localVarOptionals.LineRackIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LinePartIds.IsSet() {
		localVarFormParams.Add("line_part_ids", parameterToString(localVarOptionals.LinePartIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LineDeviceOsIds.IsSet() {
		localVarFormParams.Add("line_device_os_ids", parameterToString(localVarOptionals.LineDeviceOsIds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Groups.IsSet() {
		localVarFormParams.Add("groups", parameterToString(localVarOptionals.Groups.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
PurchasingApiService Create/update custom fields for purchases.
Custom Fields
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orderNo order number / name for the purchase. Can be new or existing.
 * @param key Can be new or existing. This is the custom field name.
 * @param optional nil or *PurchasingApiPutCustomFieldPurchasesOpts - Optional Parameters:
     * @param "Type_" (optional.String) -  this is the custom field type. If left blank, default is text. Date should be formatted as YYYY-MM-DD
     * @param "RelatedFieldName" (optional.String) -  Required if type &#x3D; related field.
     * @param "AddToPicklist" (optional.String) -  Comma separated values to add to picklist. If type is picklist and custom field is new, this is a required field. Duplicates will be ignored.
     * @param "Value" (optional.String) -  This will set the value of the custom field for the specific object.
     * @param "ClearValue" (optional.String) -  yes to clear existing value for that field
     * @param "Notes" (optional.String) -  Any additional notes
     * @param "ClearNotes" (optional.String) -  Yes to clear any existing notes.
     * @param "BulkFields" (optional.String) -  comma separated key value pairs, with key and value separated by colon. e.g.key1:value1, key2:value2

@return interface{}
*/

type PurchasingApiPutCustomFieldPurchasesOpts struct { 
	Type_ optional.String
	RelatedFieldName optional.String
	AddToPicklist optional.String
	Value optional.String
	ClearValue optional.String
	Notes optional.String
	ClearNotes optional.String
	BulkFields optional.String
}

func (a *PurchasingApiService) PutCustomFieldPurchases(ctx context.Context, orderNo string, key string, localVarOptionals *PurchasingApiPutCustomFieldPurchasesOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1.0/custom_fields/purchases/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("order_no", parameterToString(orderNo, ""))
	localVarFormParams.Add("key", parameterToString(key, ""))
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarFormParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RelatedFieldName.IsSet() {
		localVarFormParams.Add("related_field_name", parameterToString(localVarOptionals.RelatedFieldName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AddToPicklist.IsSet() {
		localVarFormParams.Add("add_to_picklist", parameterToString(localVarOptionals.AddToPicklist.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Value.IsSet() {
		localVarFormParams.Add("value", parameterToString(localVarOptionals.Value.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClearValue.IsSet() {
		localVarFormParams.Add("clear_value", parameterToString(localVarOptionals.ClearValue.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Notes.IsSet() {
		localVarFormParams.Add("notes", parameterToString(localVarOptionals.Notes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClearNotes.IsSet() {
		localVarFormParams.Add("clear_notes", parameterToString(localVarOptionals.ClearNotes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BulkFields.IsSet() {
		localVarFormParams.Add("bulk_fields", parameterToString(localVarOptionals.BulkFields.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
