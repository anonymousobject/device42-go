
/*
 * Device42 API
 *
 * <b><h2>API Overview</h2></b><br>Restful API are supported in Device42 as one of the primary methods of entering, editing and retrieving data.<br><br> The API documentation has samples in curl for now and we will be adding other programming languages in future. You can refer to our github repositories at https://github.com/device42 for some sample code in python.<br><br> The RESTful API's enforce the role-based security that is created with the Device42 app. If you want a user to have access via the API, but not via the UI - deselect 'Staff Status' for that user from UI Tools > Admins & Permissions > Administrators.<br><br>If you'd like to see your changes on our UI, please visit http://swaggerdemo.device42.com and use credentials 'guest:device42_rocks!'. Please be aware that every 30 minutes our database resets and all data entered with POST/PUT calls from this page will be lost.<br><br>If you have any questions/suggestions, please send us a note to support at device42.com below. <br><h2><a id = 'Sample_API_Code'><b>Sample API Code</b></a></h2> <b>Sample Code with API Calls in the Python and .Net Programming Languages.</b><br>The following programs written in the Python programming language are available at <a href= 'https://github.com/device42/Device42-AutoDiscovery-Scripts'>Device42 sample programs</a><br><ul><li>api-sample.py: Runs against a single Windows system and uploads info to device42 appliance.</li><li>ad-sample.py: Can run against Active directory computers, servers or a given list and upload discovered systems’ info to device42 appliance.</li><li>d42_api_linux_upload_sample_script.py: Runs on a single *nix based system and uploads info to device42 appliance.</li><li>sample-script-facter-facts-to-d42: Runs on puppet master and uploads nodes info from facter fact files to device42 appliance.</li><li>d42_api_solaris_sample_script.py: Runs on an individual solaris system and uploads info to device42 appliance.</li></ul>The csv2d42apis.py sample program shows how to create a CSV file of data to import into device42. It reads a CSV file, matches columns to arguments for APIs and sends data to device42 via POST or PUT. This program can be found at: <a href= 'https://github.com/device42/API_Helpers'> Device42 sample CSV importer</a>.<br><br>The Auto Discovery Client source code can be found at Device42 <a href='https://docs.device42.com/auto-discovery/'>Auto Discovery Client</a>. This is a .net program that uses the device42 Restful API’s to load the discovered data.<h2><a id = 'Response_Status_Messages'><b>Response & Status Messages</b></a></h2><b>Responses</b><br>The response to most POST calls will have the following format: <br>{'msg':['PartModel added/updated', 17, 'RAM Acme 123456', true, true], 'code':0}<br><br>Using the example above:<br>'17' = ID of the object<br>'RAM Acme 123456' = representation of the object<br> 'true, true' = object added and is new.<br>'true, false' = object updated.<br>'false, false' = no changes.<br><br><b>Status Codes</b><br><u>Code 0</u><br>Success! e.g. = {'msg': 'device added or updated', <b>code:0</b>}<br><br><u>'HTTP/1.1 200 OK'</u><br>Success! All other responses are errors and will display an error code e.g.: 400, 401, 403, 405, 410, 500, 503. These are explained in each call.<br><br>Please let us know if you notice something odd with a response and we will fix it! :) <h2><a id = 'Get_Limits_Offsets'><b>API Get Limits and Offsets</b></a></h2>In Device42’s global settings we have the option to enforce API GET limits and this setting is recommended for better performance. To set this value from Device42, go to Tools>Settings>Global Settings and the click Edit in the top right. Toward the bottom of the screen you will see the API section. First check the “Enforce API GET Limits” checkbox, then enter a value for API GET Limit. A good limit to start with is 500 or 1000, depending on the performance you experience.<br><br>After setting this limit all GET calls below can have the results augmented via “offset” and “limit” parameters to tell Device42 which value to start returning results from, and how many results to return at maximum.<br>Examples:<br><br>'/?limit=50' returns the first 50 results.<br><br> '/?offset=100' will start at the 101st result. <br><br>'/?offset=42&limit=42' returns 42 results, starting at the 43rd.<br><br> Note that offset is used for paging - that is, the offset is only applied when the total number of objects returned exceeds the limit that is returned.
 *
 * API version: 2.0
 * Contact: support@device42.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type CablesApiService service

/* 
CablesApiService Delete Cable
This API is used to delete the cable with the ID supplied as the required argument.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Cable ID

@return interface{}
*/
func (a *CablesApiService) DeleteCable(ctx context.Context, id int32) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1.0/cables/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
CablesApiService Retrieve information about all cables.
Get All Cables
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *CablesApiGetCablesOpts - Optional Parameters:
     * @param "CableId" (optional.Int32) -  filter by cable_id

@return interface{}
*/

type CablesApiGetCablesOpts struct { 
	CableId optional.Int32
}

func (a *CablesApiService) GetCables(ctx context.Context, localVarOptionals *CablesApiGetCablesOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1.0/cables/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CableId.IsSet() {
		localVarQueryParams.Add("cable_id", parameterToString(localVarOptionals.CableId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
CablesApiService Create or update Cables
Create/Update Cable
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cableId Cable ID/Name
 * @param optional nil or *CablesApiPostCablesOpts - Optional Parameters:
     * @param "ID" (optional.String) -  Device42 ID of cable
     * @param "Vendor" (optional.String) -  Cable vendor
     * @param "Notes" (optional.String) -  Any additional notes
     * @param "Groups" (optional.String) -  If multitenancy is on, admin groups that have access to this object are specified here, e.g. Prod_East:no,Corp:yes specifies that the admin groups for this object are Prod_East with view only permission and Corp with change permission. If this parameter is present with no value, all groups are deleted.
     * @param "RoomId" (optional.String) -  Room ID
     * @param "Room" (optional.String) -  Room name
     * @param "OriginType" (optional.String) -  Type of origin point.
     * @param "OriginId" (optional.String) -  ID of the origin point
     * @param "OriginConnectorType" (optional.String) -  Connector Type (User Definable)
     * @param "OriginCableType" (optional.String) -  Cable Type (User definable)
     * @param "OriginCableColor" (optional.String) -  Origin Cable Color
     * @param "OriginOpticType" (optional.String) -  Optic Type (Definable, ie multimode)
     * @param "OriginBackPatchPanel" (optional.String) - 
     * @param "EndPointType" (optional.String) -  Type of end point.
     * @param "EndPointId" (optional.String) -  ID of the end point
     * @param "EndConnectorType" (optional.String) -  Connector Type (User Definable)
     * @param "EndCableType" (optional.String) -  Endpoint Cable Type (User Definable)
     * @param "EndPointCableColor" (optional.String) -  Endpoint Cable Color
     * @param "EndPointOpticType" (optional.String) -  Optic Type (Definable, ie multimode)
     * @param "EndPointBackPachPanel" (optional.String) -  
     * @param "EndPointMultiple" (optional.String) -  yes to allow multiple endpoints
     * @param "CableLength" (optional.String) -  Length of Cable
     * @param "CableLengthUnits" (optional.String) -  Units for Cable Length (“m” or “ft”)

@return interface{}
*/

type CablesApiPostCablesOpts struct { 
	ID optional.String
	Vendor optional.String
	Notes optional.String
	Groups optional.String
	RoomId optional.String
	Room optional.String
	OriginType optional.String
	OriginId optional.String
	OriginConnectorType optional.String
	OriginCableType optional.String
	OriginCableColor optional.String
	OriginOpticType optional.String
	OriginBackPatchPanel optional.String
	EndPointType optional.String
	EndPointId optional.String
	EndConnectorType optional.String
	EndCableType optional.String
	EndPointCableColor optional.String
	EndPointOpticType optional.String
	EndPointBackPachPanel optional.String
	EndPointMultiple optional.String
	CableLength optional.String
	CableLengthUnits optional.String
}

func (a *CablesApiService) PostCables(ctx context.Context, cableId string, localVarOptionals *CablesApiPostCablesOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1.0/cables/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ID.IsSet() {
		localVarFormParams.Add("ID", parameterToString(localVarOptionals.ID.Value(), ""))
	}
	localVarFormParams.Add("cable_id", parameterToString(cableId, ""))
	if localVarOptionals != nil && localVarOptionals.Vendor.IsSet() {
		localVarFormParams.Add("vendor", parameterToString(localVarOptionals.Vendor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Notes.IsSet() {
		localVarFormParams.Add("notes", parameterToString(localVarOptionals.Notes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Groups.IsSet() {
		localVarFormParams.Add("groups", parameterToString(localVarOptionals.Groups.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RoomId.IsSet() {
		localVarFormParams.Add("room_id", parameterToString(localVarOptionals.RoomId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Room.IsSet() {
		localVarFormParams.Add("room", parameterToString(localVarOptionals.Room.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OriginType.IsSet() {
		localVarFormParams.Add("origin_type", parameterToString(localVarOptionals.OriginType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OriginId.IsSet() {
		localVarFormParams.Add("origin_id", parameterToString(localVarOptionals.OriginId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OriginConnectorType.IsSet() {
		localVarFormParams.Add("origin_connector_type", parameterToString(localVarOptionals.OriginConnectorType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OriginCableType.IsSet() {
		localVarFormParams.Add("origin_cable_type", parameterToString(localVarOptionals.OriginCableType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OriginCableColor.IsSet() {
		localVarFormParams.Add("origin_cable_color", parameterToString(localVarOptionals.OriginCableColor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OriginOpticType.IsSet() {
		localVarFormParams.Add("origin_optic_type", parameterToString(localVarOptionals.OriginOpticType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OriginBackPatchPanel.IsSet() {
		localVarFormParams.Add("origin_back_patch_panel", parameterToString(localVarOptionals.OriginBackPatchPanel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndPointType.IsSet() {
		localVarFormParams.Add("end_point_type", parameterToString(localVarOptionals.EndPointType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndPointId.IsSet() {
		localVarFormParams.Add("end_point_id", parameterToString(localVarOptionals.EndPointId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndConnectorType.IsSet() {
		localVarFormParams.Add("end_connector_type", parameterToString(localVarOptionals.EndConnectorType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndCableType.IsSet() {
		localVarFormParams.Add("end_cable_type", parameterToString(localVarOptionals.EndCableType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndPointCableColor.IsSet() {
		localVarFormParams.Add("end_point_cable_color", parameterToString(localVarOptionals.EndPointCableColor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndPointOpticType.IsSet() {
		localVarFormParams.Add("end_point_optic_type", parameterToString(localVarOptionals.EndPointOpticType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndPointBackPachPanel.IsSet() {
		localVarFormParams.Add("end_point_back_pach_panel", parameterToString(localVarOptionals.EndPointBackPachPanel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndPointMultiple.IsSet() {
		localVarFormParams.Add("end_point_multiple", parameterToString(localVarOptionals.EndPointMultiple.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CableLength.IsSet() {
		localVarFormParams.Add("cable_length", parameterToString(localVarOptionals.CableLength.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CableLengthUnits.IsSet() {
		localVarFormParams.Add("cable_length_units", parameterToString(localVarOptionals.CableLengthUnits.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
